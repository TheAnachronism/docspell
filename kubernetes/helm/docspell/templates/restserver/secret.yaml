apiVersion: v1
kind: Secret
metadata:
  name: {{ include "docspell.fullname" . }}-restserver-secret
  labels:
    {{- include "restserver.labels" . | nindent 4 }}
type: Opaque
stringData:
    assertions:
      {{- if gt .Values.restserver.replicaCount 1.0 }}
      {{- if not .Values.docspell.server.auth.serverSecret -}}
      {{- fail "If multiple replicas are running of the rest server, the server secret has to be fixed." -}}
      {{- else if not (or  .Values.docspell.server.auth.serverSecret.existingSecret .Values.docspell.server.auth.serverSecret.value) }}
      {{- end -}}
      {{- if and .Values.docspell.server.adminEndpoint.enabled (and (not .Values.docspell.server.adminEndpoint.existingSecret) (not .Values.docspell.server.adminEndpoint.secret)) -}}
      {{- fail "When enabling the administration endpoint, a value for authentication has the supplied." -}}
      {{- end -}}
      {{- end -}}
      {{- range $entry := .Values.docspell.server.openid -}}
      {{- if and (not $entry.provider.userUrl) (not $entry.provider.signKey) -}}
      {{- fail (printf "Failure for %s, if no userUrl is set a signKey has to be specified." $entry.provider.providerId) -}}
      {{- end -}}
      {{- end -}}
      {{- if eq .Values.docspell.server.backend.signup.mode "invite" -}}
      {{- if not .Values.docspell.server.backend.signup.newInvitePassword -}}
      {{- fail "Invite password has to be set, when using signup mode 'invite'." -}}
      {{- end -}}
      {{- end -}}
    {{- include "docspell.server.secrets.auth" . | nindent 4 }}
    {{- include "docspell.server.secrets.openid" . | nindent 4 }}
    {{- include "docspell.server.secrets.integrationEndpoint" . | nindent 4 }}
    {{- include "docspell.server.secrets.adminEndpoint" . | nindent 4 }}
    {{- include "docspell.secrets.JDBC" (dict "context" . "type" "server") | nindent 4 -}}
    {{- include "docspell.server.secrets.signup" . | nindent 4 -}}